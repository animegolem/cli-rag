#: =============================================================================
#:                                # --- SCHEMA --- #
#: =============================================================================
#: 1. Define `[[schema]]` blocks to create a note type. Assign a `name`.
#: 2. (Optional) Pin a `config_version` to prevent breaking changes.
#: 3. Set one or more `file_patterns` for discovery.
#: 4. Define the rules for filename generation.
#: 5. Use `template` to define the full structure of the final note.
#: 6. Define the custom and system frontmatter if present.
#: 7. Define custom validation rules using `schema.validate`.
[[schema]]
name = "ADR"

#: =============================================================================
#:                            # --- Version --- #
config_version = "0.1"

#: =============================================================================
#:                           # --- DISCOVERY --- #
#: =============================================================================
#: Set discovery rules for notes types. Accepts globs/regex.
#: Notes must be under your defined filepaths in `.cli-rag.toml` to be discovered.
file_patterns = [ "ADR-*.md" ]

#: =============================================================================
#:                     # --- TEMPLATES & GENERATION --- #
#: =============================================================================
#: The `[schema.new]` block configures the `new` command and defines how
#: notes are generated.
#: This block configures both how the note is tracked and what template is used.
#: If no `id_generator`is defined the note will be tracked by filename.
#: The `filename_template` defines the structure for the output filename.
#:
#:                    #--- FILENAME TEMPLATE BUILDER --- #
#:   Advanced rules for creating custom titles when using the 'new' command
#: +-------------------+-------------------------------------------------------+
#: |        Filter     |                   Description                         |
#: +-------------------+-------------------------------------------------------+
#: | `{{title}}`       |  Injects the string from the --title flag.            |
#: +-------------------+-------------------------------------------------------+
#: | `{{id}}`          |  Injects the stable ID from the id_generator.         |
#: |                   |  Use only if the `id_generator` is defined.           |
#: +-------------------+-------------------------------------------------------+
#: | `{{schema.name}}` |  Injects the name of the schema. Used as-is.          |
#: +-------------------+-------------------------------------------------------+
#: | `{{now}}`         |  Injects system time. Default = ISO 8601              |
#: +-------------------+-------------------------------------------------------+
#:
#:                       # --- Modifier Rules --- #
#: +-----------------------+--------------------------------------------------+
#: |        Filter         |                    Example                       |
#: +-----------------------+--------------------------------------------------+
#: |` kebab-case `         | {{title|kebab-case}} --> "my-new-feature"        |
#: +-----------------------+--------------------------------------------------+
#: | `snake_case`          | {{title|snake_case}} --> "my_new_feature"        |
#: +-----------------------+--------------------------------------------------+
#: | `SCREAMING_SNAKE_CASE`| {{title|SCREAMING_SNAKE_CASE}} -->               |
#: |                       | "MY_NEW_FEATURE"                                 |
#: +-----------------------+--------------------------------------------------+
#: | `camelCase`           | {{title|camelCase}} --> "myNewFeature"           |
#: +-----------------------+--------------------------------------------------+
#: | `PascalCase`          | {{title|PascalCase}} --> "MyNewFeature"          |
#: +-----------------------+--------------------------------------------------+
#: | `date:"<strftime>"`   | {{now \| date:"%Y-%m-%d"}} -> "2025-08-26"       |
#: +-----------------------+--------------------------------------------------+
[schema.new]
#: Define the name template for the `new` command. unset = filename
id_generator = { strategy = "increment", prefix = "ADR-", padding = 3 }
#: Options are ["increment", "datetime", "uuid"]
#: Prefix is not mandatory if using the later two options
filename_template = "{{id}}-{{title|kebab-case}}.md"

#: =============================================================================
#:                           # --- TEMPLATES --- #
#: =============================================================================
#: Manually defined frontmatter via the template are not tracked by `validate`.
#: The variables listed below are injected by the `new` command.
#:
#:                       # --- TEMPLATE VARIABLES --- #
#: +-----------------+---------------------------------------------------------+
#: | {{id}}          | Inject the `ID` field as defined by `id_generator`.     |
#: |                 | Fallsback to filename.                                  |
#: +-----------------+---------------------------------------------------------+
#: | {{title}}       | Inject the title provided via the `--title <T>` flag    |
#: |                 | on the `new` command.                                   |
#: +-----------------+---------------------------------------------------------+
#: | {{frontmatter}} | Inject items within the `schema.frontmatter` table into |
#: |                 | the template                                            |
#: +-----------------+---------------------------------------------------------+
#: | {{LOC|100}}     | Set the maximum number of lines per heading.            |
#: +-----------------+---------------------------------------------------------+
#: | {{date}}        | Today's date. **Default format:** `YYYY-MM-DD`.         |
#: +-----------------+---------------------------------------------------------+
#: | {{time}}        | Current time. **Default format:** `HH:mm`.              |
#: +-----------------+---------------------------------------------------------+
[schema.new.template]
[schema.new.template.prompt]
template = """
# Instructions
**Generate an Architectural Decision Record based on the user's request.**
- Fill out the template below exactly as provided.
- For the 'status' field, you MUST use one of the following values:
- [draft, proposed, accepted, superseded, cancelled].
- For the 'tags' field, provide a comma-separated list of relevant technical tags.
- Fill in the content for each heading (Objective, Context, etc.) based on the user's goal.
"""

[schema.new.template.note]
template = """
{{frontmatter}}

# {{title}}

## Objective
<!-- A concise statement explaining the goal of this decision. -->
{{LOC|50}}

## Context
<!-- What is the issue that we're seeing that is motivating this decision or change? -->
{{LOC|300}}

## Decision
<!-- What is the change that we're proposing and/or doing? -->
{{LOC|50}}

## Consequences
<!-- What becomes easier or more difficult to do because of this change? -->
{{LOC|50}}

## Updates
<!-- Changes that happened when the rubber met the road -->
{{LOC|100}}
"""

#: =============================================================================
#:            # --- ADVANCED: CUSTOM TEMPLATE GENERATOR --- #
#: =============================================================================
#: Use the OpenAPI contract to write a custom lua template manager. Buyer Beware.
# lua_generator = "path/to/script.lua"

#: =============================================================================
#:                        # --- ~.FRONTMATTER  --- #
#: =============================================================================
#: Frontmatter can be "System" or "User".
#: Named Graph edges can be defined as well.
#: Only frontmatter defined below will be tracked by the `validate` command.
#:
#: =============================================================================
#:                      # --- FRONT MATTER SYLES --- #
#: +-----------------------+---------------------------------------------------+
#: | `user_frontmatter`    | Define arbitrary YAML frontmatter. Validation     |
#: |                       | logic can be created via String, Glob or regex.   |
#: +-----------------------+---------------------------------------------------+
#: | `system_frontmatter`  | Runs pre-configured logic against YAML            |
#: |                       | frontmatter. See table below.                     |
#: +-----------------------+---------------------------------------------------+
#: | `~.frontmatter.edges` | Define all tracked/labeled graph edges for the    |
#: |                       | DAG. Will error if ID does not exist in index.    |
#: +-----------------------+---------------------------------------------------+
#: | `~.frontmatter.gtd`   | System frontmatter that triggers inclusion on     |
#: |                       | the main screen on neovim and the GTD command     |
#: +-----------------------+---------------------------------------------------+
[schema.frontmatter]
# Regular user defined fields. Cannot use `system_frontmatter` namespace.
user_frontmatter = [
  "tags",
  "priority",
  "confidence_score"
  ]

#: =============================================================================
#:                       # --- SYSTEM_FRONTMATTER --- #
#: +-----------------+---------------------------------------------------------+
#: | `node_id`       | Defines the note on the DAG using `id_generator`.       |
#: +-----------------+---------------------------------------------------------+
#: | `created_date`   | Updates the note with system time when using `new`     |
#: +-----------------+---------------------------------------------------------+
#: | `last_modified` | if `watch` is active the note will be updated with a    |
#: |                 | new modified time on edit                               |
#: +-----------------+---------------------------------------------------------+
#: Explicitly defined system fields with special behavior
system_frontmatter = [
 "node_id",
 "created_date",
 "last_modified",
 ]

#: =============================================================================
#:                      # --- `~.frontmatter.edges` --- #
#: +--------------------+------------------------------------------------------+
#: | `graph_edges`      |  Define all tracked/labeled graph edges for the      |
#: |                    |  DAG. Will error if ID does not exist in index.      |
#: +--------------------+------------------------------------------------------+
[schema.frontmatter.edges]
#: string[] of edge fields - automatically added to frontmatter. `validate` will
#: ensure linked ID's exist.
graph_edges = [
  "depends_on",
  "blocked_by",
  "supersedes",
  "implements",
  # Additional edges can be defined freely.
  ]

#: =============================================================================
#:                      # --- `~.frontmatter.gtd` --- #
#: +-----------------+---------------------------------------------------------+
#: | `kanban_status` | Define Kanban status. Displayed on the agenda           |
#: |                 | screen. Provide a array of legal statuses.              |
#: +-----------------+---------------------------------------------------------+
#: | `kanban_        | Define a status line that shows under the kanban status |
#: | statusline`     | on the agenda screen. true or false. `default = "false"`|
#: +-----------------+---------------------------------------------------------+
#: | `due_date`      | Set a due date. Appears on neovim agenda x days prior.  |
#: |                 | true or false to enable.                                |
#: +-----------------+---------------------------------------------------------+
[schema.frontmatter.gtd]
kanban_status = [
  "backlog",
  "planned",
  "in-progress",
  "completed",
  "cancelled"
  ]
kanban_statusline = true


#: =============================================================================
#:                   # --- ADVANCED: CUSTOM VALIDATOR --- #
#: =============================================================================
#: Use the OpenAPI contract to write a custom lua validator. Buyer Beware.
# lua_validator = "path/to/script.lua"

#: =============================================================================
#:                           # --- VALIDATION --- #
#: =============================================================================
#: These blocks configure the `validate` command largely using globs and regex.
#: Construct your configuration using the options below.

#: =============================================================================
#:                         # --- VALIDATORS KEYS --- #
#: +----------------------------------------------------------------------------+
#: | Validator Table                 | Configuration Key  | Description/Options |
#: +---------------------------------+--------------------+---------------------+
#: | [schema.validate]               | Top level config inherited to all tables |
#: |                                 |--------------------+---------------------|
#: |                                 | `severity`         | accepts "error"     |
#: |                                 |  (all tables)      | "warning", "ignore" |
#: +----------------------------------------------------------------------------+
[schema.validate]
severity = "error" # Default severity for all validate rules

#: =============================================================================
#:                       # --- VALIDATOR: FRONTMATTER --- #
#: +----------------------------------------------------------------------------+
#: | ↳ [~.frontmatter.allow_unknown] | Determine behavior for undefined         |
#: |                                 | frontmatter                              |
#: |                                 |--------------------+---------------------|
#: |                                 | `allow_unknown`    | Policy for extra    |
#: |                                 |                    | fields.             |
#: |                                 |                    | Options: "true",    |
#: |                                 |                    | "false",            |
#: +---------------------------------+--------------------+---------------------+
#: | ↳ [~.frontmatter.fields]        | Custom rules against `user_frontmatter`  |
#: |                                 |------------------------------------------|
#: |                                 | `regex`            | Accepts standad     |
#: |                                 |                    | regex.              |
#: |                                 +--------------------+---------------------+
#: |                                 | `enum`             | An array of exact   |
#: |                                 |                    | string matches.     |
#: |                                 +--------------------+---------------------+
#: |                                 | `globs`            | An array of glob    |
#: |                                 |                    | patterns.           |
#: |                                 +--------------------+---------------------+
#: |                                 | `float`            | A table with        |
#: |                                 |                    | optional `min` and  |
#: |                                 |                    | `max` float values. |
#: |                                 +--------------------+---------------------+
#: |                                 | `integer`          | A table with        |
#: |                                 |                    | optional `min` and  |
#: |                                 |                    | `max` float values. |
#: +----------------------------------------------------------------------------+
[schema.validate.frontmatter]
[schema.validate.frontmatter.allow_unknown]
#: Policy for fields not explicitly listed in `user_frontmatter`
#: or `system_frontmatter`.
#: default = true
allow_unknown = true
severity = "warning" # Overrides default
#:  --- Field-specific Rules ---  :#
[schema.validate.frontmatter.fields]
node_id     = { regex = "^ADR-\\d{3}$" }
tags   = { regex = "^[^\\n]*$", severity = "warning" }
related_files = {  globs = ["*.exs","*.py","*.js","*.md","*.toml"] }
priority = { integer = { min = 0, max = 100 } }
confidence_score = { float = { min = 0.0, max = 1.0 }, severity = "ignore" }

#: =============================================================================
#:                          # --- VALIDATOR: BODY --- #
#: +----------------------------------------------------------------------------+
#: | [schema.validate.body]          | Top-most table for body validation       |
#: +---------------------------------+--------------------+---------------------+
#: | ↳ [~.body.headings]             | Various body Validation settings         |
#: |                                 |------------------------------------------|
#: |                                 | `heading_policy`   | How to check heads. |
#: |                                 |                    | Options: "exact",  |
#: |                                 |                    | "missing_only",     |
#: |                                 |                    | "ignore".           |
#: |                                 |--------------------+---------------------+
#: |                                 | `max_count`        | INT. Maximum Number |
#: |                                 |                    | of headings allowed |
#: |                                 |                    | in a document.      |
#: +---------------------------------+--------------------+---------------------+
#: | ↳ [~.body.line_count]           | Prevents the LLM from outputting over    |
#: |                                 | `x` LOC                                  |
#: |                                 |--------------------+---------------------|
#: |                                 | `scan_policy`      | When to run check.  |
#: |                                 |                    | Options:            |
#: |                                 |                    | "on_creation",      |
#: |                                 |                    | "on_validate".      |
#: +----------------------------------------------------------------------------+
[schema.validate.body]
[schema.validate.body.headings]
#: Policy for matching headings against the note template.
#: Options: [
#: "exact" (exact match), "missing_only" (template headings required
#: + additional headings are allowed), "ignore"
#: ]
heading_check = "missing_only"
max_count = 10
severity = "warning" # Override default
[schema.validate.body.line_count]
#: When to perform this check.
#: define using {{LOC|`X`}} in the template manager.
#: This set the number of lines **per heading**
#: Options: "on_creation", "on_validate".
scan_policy = "on_creation"

#: =============================================================================
#:                         # --- VALIDATOR: EDGES --- #
#: +----------------------------------------------------------------------------+
#: | [schema.validate.edges]         | Top level most for all graph config      |
#: |                                 |------------------------------------------|
#: |                                 | `required_edges`   | Define if an edge   |
#: |                                 |                    | is MUST be set      |
#: +---------------------------------+--------------------+---------------------+
#: | ↳ [~.edges.wikilinks]           | Rules covering [[obsidian style]] links  |
#: |                                 |------------------------------------------|
#: |                                 | `min_outgoing`     | Int. Min required   |
#: |                                 |                    | [[wikilinks]] out.  |
#: |                                 |--------------------+---------------------+
#: |                                 | `min_incoming`     | Int. Min required   |
#: |                                 |                    | [[wikilinks]] in.   |
#: +---------------------------------+--------------------+---------------------+
#: | ↳ [~.edges.cross_schema]        | Rules for mutli schema DAGs.             |
#: |                                 |------------------------------------------|
#: |                                 | `allowed_targets`  | Define if graph     |
#: |                                 |                    |edges traverse schema|
#: +----------------------------------------------------------------------------+
[schema.validate.edges]
#: Cycle Protection is optional. "warn"|"error"|"ignore". Defaults to error.
#: Weight influences results in the ai get, graph and search tools.
#: Required fields will throw errors in `validate` if no value is set.
#: accepts error|warn|ignore
depends_on = { weight = 1.0, cycle_detection = "error", required = "error" }
blocked_by = { weight = 0.9, cycle_detection = "ignore", required = "ignore" }
supersedes = { weight = 0.7, cycle_detection = "ignore", required = "ignore" }
implements = { weight = 0.5, cycle_detection = "ignore", required = "ignore" }

[schema.validate.edges.wikilinks]
min_outgoing = 1
min_incoming = 0
severity = "warning"

[schema.validate.edges.cross_schema]
# Define schema's that may be be set as a DAG edge.
allowed_targets = ["ADR", "IMP-AI", "ADR-AI", "LOG-AI" ]

#: =============================================================================
#:                          # --- VALIDATOR: GTD --- #
#: +----------------------------------------------------------------------------+
#: | [schema.validate.gtd]           | Top level table for all GTD config       |
#: |                                 |--------------------+---------------------|
#: |                                 | `enable_TODO`      | Determine if TODO   |
#: |                                 |                    | will be scanned on  |
#: |                                 |                    | notes. true/false   |
#: |                                 |--------------------+---------------------|
#: |                                 | `enable_kanban`    | Determine if Kanban |
#: |                                 |                    | will be scanned on  |
#: |                                 |                    | notes. true/false   |
#: |                                 |--------------------+---------------------|
#: |                                 | `enable_kanban     | Determine if Kanban |
#: |                                 | statusline`        | status will be used |
#: |                                 |                    | for the agenda. T/F |
#: |                                 |--------------------+---------------------|
#: |                                 | `due_date_warning` | due dates will show |
#: |                                 |                    | on the agenda screen|
#: |                                 |                    | when due in X days. |
#: |                                 |--------------------+---------------------|
#: |                                 | `detect_cycles`    | enable or disable   |
#: |                                 |                    | cycle detection.    |
#: |                                 |                    | true or false.      |
#: +----------------------------------------------------------------------------+
[schema.validate.gtd]
# Determine if {TODO@high}: note content is tracked and added to the agenda
enable_TODO = true
# Determine if the kanban yaml is tracked and added to the agenda
enable_kanban = true
# Determine if statusline is added to agenda, if present.
enable_kanban_statusline = true
# Items will be added to the agenda when due in X days. Accepts ints.
due_date_warning = 5
severity = "warning"
