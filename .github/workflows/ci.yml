name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
            Cargo.toml
            Cargo.lock
            README.md
            Justfile
            .github
          sparse-checkout-cone-mode: true
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        if: matrix.rust == 'stable'
      
      - name: Build
        run: cargo build --verbose
      
      - name: Run tests
        run: cargo test --verbose
      
      - name: Build release
        run: cargo build --release --verbose
        if: matrix.rust == 'stable'

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
            Cargo.toml
            Cargo.lock
            README.md
            Justfile
            .github
          sparse-checkout-cone-mode: true
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run integration tests
        run: |
          cargo test --test integration_* --verbose
      
      - name: Test CLI commands
        run: |
          cargo build --release
          ./target/release/cli-rag --version
          ./target/release/cli-rag init --print-template > /tmp/test-template.toml
          ./target/release/cli-rag completions bash > /tmp/test-completions.bash
          ./target/release/cli-rag completions zsh > /tmp/test-completions.zsh

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
            Cargo.toml
            Cargo.lock
            README.md
            Justfile
            .github
          sparse-checkout-cone-mode: true
      
      - name: Extract MSRV
        id: msrv
        run: |
          msrv=$(grep -E "^rust-version" Cargo.toml | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          if [ -z "$msrv" ]; then
            echo "msrv=1.70.0" >> $GITHUB_OUTPUT
          else
            echo "msrv=$msrv" >> $GITHUB_OUTPUT
          fi
      
      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
      
      - name: Check MSRV
        run: |
          rm -f Cargo.lock
          cargo check --all-features

  contracts:
    name: Contracts Compliance (Phase 1)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build release
        run: cargo build --release --verbose
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install jsonschema
        run: |
          python -m pip install --upgrade pip
          python -m pip install jsonschema
      - name: Create fixture repo
        id: fx
        run: |
          set -euo pipefail
          WORKDIR=$(mktemp -d)
          echo "workdir=$WORKDIR" >> $GITHUB_OUTPUT
          mkdir -p "$WORKDIR/notes"
          # minimal config using the fixture base
          BASE="$WORKDIR/notes"
          printf "bases = [\n  '%s'\n]\n" "$BASE" > "$WORKDIR/.cli-rag.toml"
      - name: Validate info JSON matches schema
        run: |
          SCHEMA="contracts/v1/cli/info.schema.json"
          OUT=$(./target/release/cli-rag --config "${{ steps.fx.outputs.workdir }}/.cli-rag.toml" info --format json)
          python - "$SCHEMA" "$OUT" <<'PY'
          import sys, json
          from jsonschema import validate, Draft202012Validator
          schema_path, data_str = sys.argv[1], sys.argv[2]
          schema = json.load(open(schema_path))
          data = json.loads(data_str)
          Draft202012Validator.check_schema(schema)
          validate(instance=data, schema=schema)
          print("info.json OK")
          PY
      - name: Validate validate --dry-run JSON matches schema
        run: |
          SCHEMA="contracts/v1/cli/validate_result.schema.json"
          OUT=$(./target/release/cli-rag --config "${{ steps.fx.outputs.workdir }}/.cli-rag.toml" validate --format json --dry-run)
          python - "$SCHEMA" "$OUT" <<'PY'
          import sys, json
          from jsonschema import validate, Draft202012Validator
          schema_path, data_str = sys.argv[1], sys.argv[2]
          schema = json.load(open(schema_path))
          data = json.loads(data_str)
          Draft202012Validator.check_schema(schema)
          validate(instance=data, schema=schema)
          print("validate(dry).json OK")
          PY
      - name: Validate resolved config snapshot
        run: |
          WORKDIR="${{ steps.fx.outputs.workdir }}"
          ./target/release/cli-rag --config "$WORKDIR/.cli-rag.toml" validate --format json >/dev/null
          test -f "$WORKDIR/.cli-rag/resolved.json"
          SCHEMA="contracts/v1/config/resolved_config.json"
          python - "$SCHEMA" "$WORKDIR/.cli-rag/resolved.json" <<'PY'
          import sys, json
          from jsonschema import validate, Draft202012Validator
          schema_path, resolved_path = sys.argv[1], sys.argv[2]
          schema = json.load(open(schema_path))
          data = json.load(open(resolved_path))
          Draft202012Validator.check_schema(schema)
          validate(instance=data, schema=schema)
          print("resolved.json OK")
          PY
