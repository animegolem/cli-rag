name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
            Cargo.toml
            Cargo.lock
            README.md
            Justfile
            .github
          sparse-checkout-cone-mode: true
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        if: matrix.rust == 'stable'
      
      - name: Build
        run: cargo build --verbose
      
      - name: Run tests
        run: cargo test --verbose
      
      - name: Build release
        run: cargo build --release --verbose
        if: matrix.rust == 'stable'

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
            Cargo.toml
            Cargo.lock
            README.md
            Justfile
            .github
          sparse-checkout-cone-mode: true
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run integration tests
        run: |
          cargo test --test integration_* --verbose
      
      - name: Test CLI commands
        run: |
          cargo build --release
          ./target/release/adr-rag --version
          ./target/release/adr-rag init --print-template > /tmp/test-template.toml
          ./target/release/adr-rag completions bash > /tmp/test-completions.bash
          ./target/release/adr-rag completions zsh > /tmp/test-completions.zsh

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
            Cargo.toml
            Cargo.lock
            README.md
            Justfile
            .github
          sparse-checkout-cone-mode: true
      
      - name: Extract MSRV
        id: msrv
        run: |
          msrv=$(grep -E "^rust-version" Cargo.toml | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          if [ -z "$msrv" ]; then
            echo "msrv=1.70.0" >> $GITHUB_OUTPUT
          else
            echo "msrv=$msrv" >> $GITHUB_OUTPUT
          fi
      
      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
      
      - name: Check MSRV
        run: |
          rm -f Cargo.lock
          cargo check --all-features
